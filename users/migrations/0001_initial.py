# Generated by Django 5.2.1 on 2025-06-01 18:15

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('user', 'User'), ('medic', 'Medic'), ('clinic', 'Clinic')], default='user', max_length=10)),
                ('obra_social', models.CharField(choices=[('osde', 'OSDE'), ('swiss_medical', 'Swiss Medical'), ('galeno', 'Galeno'), ('medife', 'Medifé'), ('other', 'Other')], default='other', max_length=20)),
                ('numero_afiliado', models.CharField(max_length=20, unique=True, validators=[django.core.validators.RegexValidator(code='invalid_numero_afiliado', message='Número de afiliado debe contener entre 8 y 12 dígitos numéricos', regex='^\\d{8,12}$')])),
                ('dni', models.CharField(max_length=8, unique=True, validators=[django.core.validators.RegexValidator(code='invalid_dni', message='El DNI debe contener exactamente 8 dígitos numéricos', regex='^\\d{8}$')])),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('nombre', models.CharField(max_length=50)),
                ('apellido', models.CharField(max_length=50)),
                ('fecha_nacimiento', models.DateField()),
                ('telefono', models.CharField(max_length=15, validators=[django.core.validators.RegexValidator(code='invalid_telefono', message='El teléfono debe contener entre 7 y 15 dígitos, opcionalmente con un prefijo internacional.', regex='^\\+?\\d{7,15}$')])),
                ('ciudad', models.CharField(choices=[('villa_gesell', 'Villa Gesell'), ('pinamar', 'Pinamar'), ('madariaga', 'Madariaga')], default='villa_gesell', max_length=50)),
                ('direccion', models.CharField(max_length=255, validators=[django.core.validators.RegexValidator(code='invalid_direccion', message='La dirección solo puede contener letras, números, espacios y caracteres especiales básicos.', regex='^[A-Za-z0-9\\s.,#-]+$')])),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
